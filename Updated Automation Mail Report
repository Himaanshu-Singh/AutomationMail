import smtplib
import ssl
import os
import math
from datetime import datetime, timedelta
from robot.api import ExecutionResult, ResultVisitor
from email import encoders
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
import webbrowser
import matplotlib.pyplot as plt

# Email credentials
sender_email = "uladmin@theuniversityliving.com"
receiver_email = "himanshu.singh@universityliving.com"
password = "your password"

# Define report file paths
output_file_path = "C:/Users/himanshu.singh/Downloads/Automation-appium-main/robotframework/robotframework/TestCases/output.xml"
html_report_path = "C:/Users/himanshu.singh/Downloads/Automation-appium-main/robotframework/robotframework/TestCases/report.html"
log_file_path = "C:/Users/himanshu.singh/Downloads/Automation-appium-main/robotframework/robotframework/TestCases/log.html"

# Check if the output file exists
if not os.path.exists(output_file_path):
    raise FileNotFoundError(f"The output file '{output_file_path}' does not exist. Please ensure the tests have been run and the file is generated.")

# Check if the log file exists
if not os.path.exists(log_file_path):
    raise FileNotFoundError(f"The log file '{log_file_path}' does not exist. Please ensure the tests have been run and the file is generated.")

# Load the execution results
result = ExecutionResult(output_file_path)
result.configure(stat_config={'suite_stat_level': 2, 'tag_stat_combine': 'tagANDanother'})

total_suite = 0
passed_suite = 0
failed_suite = 0
suite_details = ""
test_case_details = ""
log_details = ""

class SuiteResults(ResultVisitor):
    def start_suite(self, suite):
        global total_suite, passed_suite, failed_suite, suite_details, test_case_details, log_details
        if suite.tests:
            total_suite += 1
            if suite.status == "PASS":
                passed_suite += 1
            else:
                failed_suite += 1

            # Add details of each suite
            suite_name = suite.name
            suite_test_count = len(suite.tests)
            suite_pass_count = sum(1 for test in suite.tests if test.status == "PASS")
            suite_fail_count = suite_test_count - suite_pass_count

            suite_details += f"""
            <tr>
                <td>{suite_name}</td>
                <td>{suite_test_count}</td>
                <td>{suite_pass_count}</td>
                <td>{suite_fail_count}</td>
            </tr>
            """

            # Add test case details for each suite
            for test in suite.tests:
                status_class = "status-pass" if test.status == "PASS" else "status-fail"
                test_case_details += f"""
                <tr>
                    <td>{suite_name}</td>
                    <td>{test.name}</td>
                    <td class="{status_class}">{test.status}</td>
                </tr>
                """

                if test.status == "FAIL":
                    log_details += f"""
                    <tr>
                        <td colspan="2">
                            <div class="log-container">
                                <strong>{test.name}</strong>
                                <pre>{test.message}</pre>
                            </div>
                        </td>
                    </tr>
                    """

result.visit(SuiteResults())
suitepp = round(passed_suite * 100.0 / total_suite, 2) if total_suite else 0
elapsedtime = datetime(1970, 1, 1) + timedelta(milliseconds=result.suite.elapsedtime)
elapsedtime_str = elapsedtime.strftime("%X")
testpp = round(result.statistics.total.passed * 100.0 / result.statistics.total.total, 2) if result.statistics.total.total else 0
elapsedtime_hours = elapsedtime_str.split(":")[0]
elapsedtime_minutes = elapsedtime_str.split(":")[1]

labels = ['Pass', 'Fail']
sizes = [result.statistics.total.passed, result.statistics.total.failed]
colors = ['#2ecc71', '#e74c3c']  # Green and Red colors for Pass and Fail
explode = (0.1, 0)  # Explode the Pass slice

fig, ax = plt.subplots(figsize=(8, 6))  # Set figure size
ax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors,
       textprops={'size': 'larger'},  # Increase text size
       wedgeprops={'linewidth': 2, 'edgecolor': 'white'})  # Add border to wedges
ax.axis('equal')

chart_image_path = os.path.join(os.getcwd(), 'pie_chart.png')
plt.savefig(chart_image_path, bbox_inches='tight', pad_inches=0.5)
plt.close()

# HTML content
html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Robot Framework Automation Report</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
        body {{
            background-color: #f7f7f7;
            font-family: 'Roboto', Arial, sans-serif;
            margin: 0;
            padding: 0;
        }}
        .container {{
            width: 100%;
            padding: 20px;
            background-color: #f7f7f7;
            max-width: 800px;
            margin: 40px auto;
            background-color: #fff;
            border: 1px solid #ddd;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }}
        .content {{
            max-width: 800px;
            margin: 0 auto;
            background: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }}
        h1, h2, h3 {{
            font-family: 'Roboto', Arial, sans-serif;
            font-weight: 400;
            text-align: center;
        }}
        h1 {{
            color: #333333;
        }}
        h2 {{
            color: #555555;
            border-bottom: 2px solid #dddddd;
            padding-bottom: 5px;
        }}
        h3 {{
            margin-top: 20px;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }}
        th, td {{
            padding: 12px;
            border-bottom: 1px solid #dddddd;
            text-align: left;
        }}
        th {{
            background-color: #007BFF;
            color: white;
            text-align: center;
        }}
        .status-pass {{
            color: green;
            font-weight: bold;
        }}
        .status-fail {{
            color: red;
            font-weight: bold;
        }}
        .metric-table th, .metric-table td {{
            text-align: center;
        }}
        .metric-table th {{
            background-color: #007BFF;
            color: white;
        }}
        .summary {{
            margin-top: 20px;
        }}
        .summary p {{
            font-size: 1.1em;
        }}
        .footer {{
            text-align: center;
            margin-top: 20px;
            font-size: 0.9em;
            color: #777777;
        }}
        .chart {{
            text-align: center;
        }}
        .log-container {{
            max-height: 150px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 5px;
            margin-top: 5px;
            font-size: 0.8em;
            background: #f9f9f9;
        }}
        pre {{
            white-space: pre-wrap;
            word-wrap: break-word;
            margin: 0;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="content">
            <h1>Robot Framework Automation Report</h1>
            <p>Hi Team,<br>Following are the last automation testing status:</p>
            <h2>Metrics</h2>
            <table class="metric-table">
                <thead>
                    <tr>
                        <th>Stats</th>
                        <th>Total</th>
                        <th>Pass</th>
                        <th>Fail</th>
                        <th>Percentage (%)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="text-align: left;font-weight: bold;">SUITE</td>
                        <td>{total_suite}</td>
                        <td>{passed_suite}</td>
                        <td>{failed_suite}</td>
                        <td>{suitepp}</td>
                    </tr>
                    <tr>
                        <td style="text-align: left;font-weight: bold;">TESTS</td>
                        <td>{result.statistics.total.total}</td>
                        <td>{result.statistics.total.passed}</td>
                        <td>{result.statistics.total.failed}</td>
                        <td>{testpp}</td>
                    </tr>
                </tbody>
            </table>

            <h2>Suite Details</h2>
            <table class="metric-table">
                <thead>
                    <tr>
                        <th>Suite Name</th>
                        <th>Total Test Cases</th>
                        <th>Passed</th>
                        <th>Failed</th>
                    </tr>
                </thead>
                <tbody>
                    {suite_details}
                </tbody>
            </table>

            <h3>Test Cases</h3>
            <table style="width: 100%; border-collapse: collapse;">
                <thead>
                    <tr>
                        <th>Suite Name</th>
                        <th>Test Case Name</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    {test_case_details}
                </tbody>
            </table>

            <h3>Fail Logs</h3>
            <table style="width: 100%; border-collapse: collapse;">
                <tbody>
                    {log_details}
                </tbody>
            </table>

            <div class="chart">
                <h2>Pie Chart</h2>
                <img src="cid:chart_image" alt="Pie Chart" style="width: 50%; height: auto;">
            </div>

            <h2>Info</h2>
            <table>
                <tbody>
                    <tr>
                        <td style="text-align: left;font-weight: normal;width: 30vh;">Execution Time</td>
                        <td style="text-align: center;font-weight: normal;">{elapsedtime_minutes} minutes</td>
                    </tr>
                    <tr>
                        <td style="text-align: left;font-weight: normal;width: 50vh;">Generated By</td>
                        <td style="text-align: center;font-weight: normal;">Robot Framework</td>
                    </tr>
                </tbody>
            </table>

            <div class="summary">
                <h2>Summary</h2>
                <p>The suite execution took {elapsedtime_hours} hours and {elapsedtime_minutes} minutes.</p>
                <p>The overall pass percentage is {testpp}%.</p>
            </div>

            <div class="footer">
                <p>Please refer to the logs for detailed information.</p>
                <p>Regards,<br>QA Team</p>
            </div>
        </div>
    </div>
</body>
</html>
"""

with open(html_report_path, "w") as file:
    file.write(html_content)

webbrowser.open(f"file://{os.path.abspath(html_report_path)}")

# Email setup
msg = MIMEMultipart("related")
msg["Subject"] = "Automation Report"
msg["From"] = sender_email
msg["To"] = receiver_email

part = MIMEText(html_content, "html")
msg.attach(part)

# Attach HTML report
with open(html_report_path, "rb") as attachment:
    part = MIMEBase("application", "octet-stream")
    part.set_payload(attachment.read())
    encoders.encode_base64(part)
    part.add_header("Content-Disposition", f"attachment; filename=report.html")
    msg.attach(part)

# Attach pie chart image
with open(chart_image_path, 'rb') as f:
    img = MIMEImage(f.read(), name=os.path.basename(chart_image_path))
    img.add_header('Content-ID', '<chart_image>')
    img.add_header('Content-Disposition', 'inline', filename=os.path.basename(chart_image_path))
    msg.attach(img)

# Attach log file
with open(log_file_path, "rb") as attachment:
    part = MIMEBase("application", "octet-stream")
    part.set_payload(attachment.read())
    encoders.encode_base64(part)
    part.add_header("Content-Disposition", f"attachment; filename=log.html")
    msg.attach(part)

# Send the email
context = ssl.create_default_context()

with smtplib.SMTP("smtp.gmail.com", 587) as server:
    server.starttls(context=context)
    server.login(sender_email, password)
    server.sendmail(sender_email, receiver_email, msg.as_string())

os.remove(chart_image_path)
